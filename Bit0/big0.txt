빅0 표기법의 필요성
코드를 좋ㅇ은 코드, 엉망인 코드 대신 숫자로 코드의 성능을 표기 할수 있다.

빅0
대략적으로 숫자를세는 것의 공식적인 표현
정식으로 입력된 내용이 늘어날 수록 알고리즘에 실행시간이 어떻게 변하는지 설명하는 공식적인 방식

평션의 입력값이 늘어나는 것과 펑션실행시간이 변화는 관계

N이 커질수록 컴퓨터가 f(n) 상수 곱하기 f(n) 보다
간단한 연산을 덜 해야한다면 그 알고리즘을 O(f(n))이라고 표현한다.

O(1)
O(n)  for문
O(n^2) 이중for문

O(2n) -> O(n)
O(500) -> O(1)
O(13n^2) -> O(n^2)

산수는 상수이다. 변수도 상수
인덱스, 객체에서 키로 찾기 상수


지금까지는 시간 복잡도

다음은 공간 복잡도 : 

불, 숫자, undefined null은 자바스크립트에서 모두 불변 공간이다.
그렇기 때문에 입력의 쿠기와 상관없이 똑같은 공간을 차지한다.

문자열은  다르다 : O(n)
refernece타입, 배열 객체도 대부분 O(n)이다.
n은 배열의 길이이거나 객체의 키 갯수일수도 있다.
정확히 말하면 길이는 아니지만 길이가 4인 배열과 2인 배열이 있을때
길이가 4인 배열이 2인배열보다 2배 더 많은 공간을 차지한다.


로그함수 : 지수함수의 역
O(log n) 은 O(n) 보다 좋은 모양을 가지고 있다.
어떤 탐색 알고리즘들은 로그시간 복잡도를 가지고 있다.
그리고 효율적인 정렬 알고리즘들도 로그와 관련되어 있다.
모든 정렬 알고리즘들이 그런것은 아니지만 효율적인 것들이 그렇다.
재귀에서도 로그와 관련되어있고 시간복잡도가 아닌 공간복잡도와 관련되어 있다.


정리 :
알고리즘의 성능을 분석하기 위해서 빅O표기법을 이용한다.
입력의 크기가 늘어날수록 전체적인 추세와 관련되어 있다.
우리가 궁금한것은 실행히간이 어떻게 변하는지, 공간복잡도가 어떻게 변하는지 이다.
빅O를 통해서 시간과 공간 복잡도에 대한 이해를 높일수 있다.
정확도가 아니라 전체적인 추세를 중요하게 생각한다.
빅O로 측정되는 알고리즘의 시간과 공간 복잡도는 하드웨어에 영향을 받지 않는다.
어느 알고리즘을 일반컴퓨터와 슈퍼컴퓨터에서 실행하는 속도는 실제로
차이가 있겠지만 전반적인 주제는 다르지 않을것이다.
빅O는 실행될 연산의 갯수를 따지기 때문이다. 
빅O표기법은 세상 모든곳에서 사용한다.

